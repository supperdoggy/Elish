import telebot
from constants import token, MaksId
import datetime
from botmethods import *
import os
from app import db, items


bot = telebot.TeleBot(token)

@bot.message_handler(commands=["start"])
def greetings(message):
    if message.from_user.id == MaksId:
        bot.reply_to(message, "–î–∞—Ä–æ–≤–∞ –º–∞–∫—Å")
    else:
        bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ")

    # sends starter keyboard
    sendStarterKeyboard(bot, message)

    print(message)

# if content type is text
@bot.message_handler(content_types=["text"])
def answer(message):
    # simplifying user text
    text = message.text

    # sends today`s bill
    if text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ä—É—á–∫—É –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç":
        try:
            f = open("bills/" + str(datetime.date.today()) + ".txt", "rb")
            bot.send_document(message.from_user.id, f)
            bot.reply_to(message, "–û—Å—å –≤–∏—Ä—É—á–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å")
            f.close()
        except:
            bot.reply_to(message, "–ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ä—É—á–∫–∏ –Ω–µ–º–∞—î")

    # sends information about how to get bill from date
    elif text == "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Ä—É—á–∫—É –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É":
        bot.reply_to(message, "–£–≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ —Ä—ñ–∫-–º—ñ—Å—è—Ü—å-–¥–µ–Ω—å —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å\n–ø—Ä–∏–∫–ª–∞–¥: 2019-12-12")

    # send information about how to add new item
    elif text == "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É":
        bot.reply_to(message, "–£–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ —Ç–æ–≤–∞—Ä-—Ü—ñ–Ω–∞-–ö–∞—Ç–µ–≥–æ—Ä—ñ—è\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–°—Ç—Ä–∏–∂–∫–∞ –∂—ñ–Ω–æ—á–∞-12-–°—Ç—Ä–∏–∂–∫–∞'")

    # ================================== answer ==================================
    elif text == "–¢–∞–∫":
        data = getData(message.from_user.id)

        # adding item
        newItem = items(name=data["name"], price=data["price"], category=data["category"])

        db.session.add(newItem)
        db.session.commit()

        # adding item

        sendStarterKeyboard(bot, message)
        os.remove("buffer/%s.json" % message.from_user.id)
    elif text == "–ù—ñ":
        try:
            os.remove("buffer/%s.json" % message.from_user.id)
            bot.reply_to(message, "–ì–æ—Ç–æ–≤–æ")
            sendStarterKeyboard(bot, message)
        except:
            bot.reply_to(message, "–ü–æ–º–∏–ª–∫–∞")
            sendStarterKeyboard(bot, message)
    # ================================== answer ==================================

    # checks if first char of text is digit (2 because it`d need 1000 years to get valid bill ü§™)
    elif text[0] == "2":
        try:
            f = open("bills/" + message.text + ".txt", "rb")
            bot.send_document(message.from_user.id, f)
            bot.reply_to(message, "–û—Å—å –∑–≤—ñ—Ç –∑–∞ –¥–∞–Ω–∏–π –¥–µ–Ω—å")
            f.close()
        except:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –¥–∞–Ω–∏–π –¥–µ–Ω—å")


    # checks if first char is letter to try do add new item into db
    elif text[0].lower() in ascii_lowercase or text[0].lower() in ukrLetters:
        # if text contains name-price-category then True and returns dict with name, price and category
        if checkRequirements(message.text)["ifTrue"]:
            # getting dict with name, price, category
            data = checkRequirements(message.text)
            # building answer for bot
            ans = "–Ü–º'—è –ø–æ—Å–ª—É–≥–∏ - " + data["name"] + "\n" + "–¶—ñ–Ω–∞ –ø–æ—Å–ª—É–≥–∏ - " + data["price"] + "\n"+ "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ—Å–ª—É–≥–∏ - " + data["category"]
        else:
            ans = "–ù–µ–ø—Äa–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è"
        # sending answer to user
        bot.send_message(message.chat.id, ans)

        # keyboard
        main = telebot.types.ReplyKeyboardMarkup(row_width=3)
        btn1 = telebot.types.KeyboardButton("–¢–∞–∫")
        btn2 = telebot.types.KeyboardButton("–ù—ñ")
        main.add(btn1, btn2)

        # saving data into buffer
        saveData(data, message.from_user.id)
        # sending markup
        bot.send_message(message.chat.id, "–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –≤ –±–∞–∑—É —Ü–µ–π –ø—Ä–æ–¥—É–∫—Ç?", reply_markup=main)

# bot pooling
bot.polling(none_stop=True)

